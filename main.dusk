Z_FLAG :: 128 as u8
N_FLAG :: 64 as u8
H_FLAG :: 32 as u8
C_FLAG :: 16 as u8

CYCLES_PER_H_SYNC :: 456 as usize
LINES_PER_FRAME :: 153 as u8

fn main() {
    bootrom :: read_file("bootrom.bin")
    game :: read_file("tetris.gb")
    gb := new_gameboy(bootrom, game)

    sp := 0 as u16
    pc := 0 as u16

    counter := 0 as usize
    interrupts_enabled := false // TODO: is this an accurate default?
    interrupt_action: i8 = 0

    breakpoint :: $eb as u16
    stepping := false
    last_time: u64 = 0
    if kernel32.QueryPerformanceCounter(&mut last_time) == FALSE {
        panic("unable to get performance counter")
    }
    timer_freq: u64 = 0
    if kernel32.QueryPerformanceFrequency(&mut timer_freq) == FALSE {
        panic("unable to get performance frequency")
    }

    while true {
        if pc == breakpoint {
            //stepping = true
        }
        opcode :: read_gb_byte(&gb, pc)
        if stepping {
            stdin :: kernel32.GetStdHandle(STD_INPUT_HANDLE)
            mychars := 0 as u64
            chars_read := 0 as DWORD
            print("about to run opcode ")
            print_byte(opcode)
            print(" at address ")
            print_word(pc)
            print("\n")
            succ :: kernel32.ReadConsoleA(stdin, &mut mychars as void *mut, 8, &mut chars_read, NULL())
            if mychars as u8 == "c" {
                stepping = false
            }
        }
        if counter >= CYCLES_PER_H_SYNC {
            gb.ly += 1
            counter = counter - CYCLES_PER_H_SYNC
        }

        if gb.ly >= LINES_PER_FRAME {
            gb.ly = gb.ly - LINES_PER_FRAME
            time: u64 = 0
            if kernel32.QueryPerformanceCounter(&mut time) == FALSE {
                panic("unable to get performance counter")
            }
            diff := (time - last_time) / (timer_freq / 1000)
            /*print("frame time: ~")
            print_num(diff)
            print("ms\n")*/
            last_time = time
        }

        /*if interrupt_action > 0 {
            interrupt_action = interrupt_action - 1
            if interrupt_action == 0 {
                interrupts_enabled = true
            }
        } else if interrupt_action < 0 {
            interrupt_action += 1
            if interrupt_action == 0 {
                interrupts_enabled = false
            }
        }*/

        switch opcode {
            $00: {
                pc += 1
                counter += 4
            }
            $1A: {
                // LD A, (DE)
                gb.a = read_gb_byte(&gb, get_de(&gb))
                pc += 1
                counter += 8
            }
            $7E: {
                // LD A, (HL)
                gb.a = read_gb_byte(&gb, get_hl(&gb))
                pc += 1
                counter += 8
            }
            $FA: {
                // LD A, (nn)
                address :: read_gb_word(&gb, pc + 1)
                gb.a = read_gb_byte(&gb, address)
                pc += 3
                counter += 16
            }
            $3E: {
                // LD A, #
                gb.a = read_gb_byte(&gb, pc + 1)
                pc += 2
                counter += 8
            }
            $E2: {
                // LD (C), A
                write_gb_byte(&mut gb, 65280 + gb.c as u16, gb.a)
                pc += 1
                counter += 8
            }
            $E0: {
                // LDH (n), A
                val :: read_gb_byte(&gb, pc + 1)
                write_gb_byte(&mut gb, 65280 + val as u16, gb.a)
                pc += 2
                counter += 12
            }
            $F0: {
                // LDH A, (n)
                val :: read_gb_byte(&gb, pc + 1)
                gb.a = read_gb_byte(&gb, 65280 + val as u16)
                pc += 2
                counter += 12
            }
            $C3: {
                pc = read_gb_word(&gb, pc + 1)
                counter += 12
            }
            $20: {
                // JR NZ, n
                if !gb.z_flag {
                    offset :: read_gb_byte(&gb, pc + 1) as i8 as i16 as u16
                    pc += offset
                }
                pc += 2
                counter += 8
            }
            $28: {
                // JR Z, n
                if gb.z_flag {
                    offset :: read_gb_byte(&gb, pc + 1) as i8 as i16 as u16
                    pc += offset
                }
                pc += 2
                counter += 8
            }
            $30: {
                // JR NC, n
                if !gb.c_flag {
                    offset :: read_gb_byte(&gb, pc + 1) as i8 as i16 as u16
                    pc += offset
                }
                pc += 2
                counter += 8
            }
            $38: {
                // JR C, n
                if gb.c_flag {
                    offset :: read_gb_byte(&gb, pc + 1) as i8 as i16 as u16
                    pc += offset
                }
                pc += 2
                counter += 8
            }
            $18: {
                // JR n
                offset :: read_gb_byte(&gb, pc + 1) as i8 as i16 as u16
                pc += offset + 2
                counter += 8
            }
            $CD: {
                // CALL nn
                sp -= 2
                address :: read_gb_word(&gb, pc + 1)
                write_gb_word(&mut gb, sp, pc + 3)
                pc = address
                counter += 12
            }
            $C9: {
                address :: read_gb_word(&gb, sp)
                sp += 2
                pc = address
                counter += 8
            }
            $F5: {
                // PUSH AF
                sp -= 2
                write_gb_word(&mut gb, sp, get_af(&gb))
                pc += 1
                counter += 16
            }
            $C5: {
                // PUSH BC
                sp -= 2
                write_gb_word(&mut gb, sp, get_bc(&gb))
                pc += 1
                counter += 16
            }
            $D5: {
                // PUSH DE
                sp -= 2
                write_gb_word(&mut gb, sp, get_de(&gb))
                pc += 1
                counter += 16
            }
            $E5: {
                // PUSH HL
                sp -= 2
                write_gb_word(&mut gb, sp, get_hl(&gb))
                pc += 1
                counter += 16
            }
            $F1: {
                // POP AF
                val :: read_gb_word(&gb, sp)
                sp += 2
                set_af(&mut gb, val)

                pc += 1
                counter += 12
            }
            $C1: {
                // POP BC
                val :: read_gb_word(&gb, sp)
                sp += 2
                set_bc(&mut gb, val)

                pc += 1
                counter += 12
            }
            $D1: {
                // POP DE
                val :: read_gb_word(&gb, sp)
                sp += 2
                set_de(&mut gb, val)

                pc += 1
                counter += 12
            }
            $E1: {
                // POP HL
                val :: read_gb_word(&gb, sp)
                sp += 2
                set_hl(&mut gb, val)

                pc += 1
                counter += 12
            }
            $01: {
                // LD BC, nn
                set_bc(&mut gb, read_gb_word(&gb, pc + 1))
                pc += 3
                counter += 12
            }
            $11: {
                // LD DE, nn
                set_de(&mut gb, read_gb_word(&gb, pc + 1))
                pc += 3
                counter += 12
            }
            $21: {
                // LD HL, nn
                set_hl(&mut gb, read_gb_word(&gb, pc + 1))
                pc += 3
                counter += 12
            }
            $31: {
                // LD SP, nn
                sp = read_gb_word(&gb, pc + 1)
                pc += 3
                counter += 12
            }
            $AF: {
                // XOR A
                gb.a ^= gb.a
                gb.z_flag = gb.a == 0
                gb.n_flag = false
                gb.h_flag = false
                gb.c_flag = false

                pc += 1
                counter += 4
            }
            $32: {
                // LDD (HL), A
                write_gb_byte(&mut gb, get_hl(&gb), gb.a)
                set_hl(&mut gb, get_hl(&gb) - 1)
                // TODO: flags?
                pc += 1
                counter += 8
            }
            $22: {
                // LDI (HL), A
                write_gb_byte(&mut gb, get_hl(&gb), gb.a)
                set_hl(&mut gb, get_hl(&gb) + 1)
                // TODO: flags?
                pc += 1
                counter += 8
            }
            $3C: {
                // INC A
                inc_instr(&mut gb, &mut gb.a)

                pc += 1
                counter += 4
            }
            $04: {
                // INC B
                inc_instr(&mut gb, &mut gb.b)

                pc += 1
                counter += 4
            }
            $0C: {
                // INC C
                inc_instr(&mut gb, &mut gb.c)

                pc += 1
                counter += 4
            }
            $14: {
                // INC D
                inc_instr(&mut gb, &mut gb.d)

                pc += 1
                counter += 4
            }
            $1C: {
                // INC E
                inc_instr(&mut gb, &mut gb.e)

                pc += 1
                counter += 4
            }
            $24: {
                // INC H
                inc_instr(&mut gb, &mut gb.h)

                pc += 1
                counter += 4
            }
            $2C: {
                // INC L
                inc_instr(&mut gb, &mut gb.l)

                pc += 1
                counter += 4
            }
            $34: {
                // INC (HL)
                val := read_gb_byte(&gb, get_hl(&gb))
                inc_instr(&mut gb, &mut val)
                write_gb_byte(&mut gb, get_hl(&gb), val)

                pc += 1
                counter += 4
            }
            $3D: {
                // DEC A
                dec_instr(&mut gb, &mut gb.a)

                pc += 1
                counter += 4
            }
            $05: {
                // DEC B
                dec_instr(&mut gb, &mut gb.b)

                if pc == $8e {
                    print("decremented B to ")
                    print_byte(gb.b)
                    print(", ")
                    if !gb.z_flag {
                        print("N")
                    }
                    print("Z\n")
                }

                pc += 1
                counter += 4
            }
            $0D: {
                // DEC C
                dec_instr(&mut gb, &mut gb.c)

                pc += 1
                counter += 4
            }
            $15: {
                // DEC D
                dec_instr(&mut gb, &mut gb.d)

                pc += 1
                counter += 4
            }
            $1D: {
                // DEC E
                dec_instr(&mut gb, &mut gb.e)

                pc += 1
                counter += 4
            }
            $25: {
                // DEC H
                dec_instr(&mut gb, &mut gb.h)

                pc += 1
                counter += 4
            }
            $2D: {
                // DEC L
                dec_instr(&mut gb, &mut gb.l)

                pc += 1
                counter += 4
            }
            $35: {
                // DEC (HL)
                val := read_gb_byte(&gb, get_hl(&gb))
                dec_instr(&mut gb, &mut val)
                write_gb_byte(&mut gb, get_hl(&gb), val)

                pc += 1
                counter += 12
            }
            $BF: {
                // CP A
                cp_instr(&mut gb, gb.a)

                pc += 1
                counter += 4
            }
            $B8: {
                // CP B
                cp_instr(&mut gb, gb.b)

                pc += 1
                counter += 4
            }
            $B9: {
                // CP C
                cp_instr(&mut gb, gb.c)

                pc += 1
                counter += 4
            }
            $BA: {
                // CP D
                cp_instr(&mut gb, gb.d)

                pc += 1
                counter += 4
            }
            $BB: {
                // CP E
                cp_instr(&mut gb, gb.e)

                pc += 1
                counter += 4
            }
            $BC: {
                // CP H
                cp_instr(&mut gb, gb.h)

                pc += 1
                counter += 4
            }
            $BD: {
                // CP L
                cp_instr(&mut gb, gb.l)

                pc += 1
                counter += 4
            }
            $BE: {
                // CP (HL)
                val :: read_gb_byte(&gb, get_hl(&gb))
                cp_instr(&mut gb, val)

                pc += 1
                counter += 8
            }
            $FE: {
                // CP #
                val :: read_gb_byte(&gb, pc + 1)
                cp_instr(&mut gb, val)

                pc += 2
                counter += 8
            }
            $97: {
                // SUB A
                sub_instr(&mut gb, gb.a)

                pc += 1
                counter += 4
            }
            $90: {
                // SUB B
                sub_instr(&mut gb, gb.b)

                pc += 1
                counter += 4
            }
            $91: {
                // SUB C
                sub_instr(&mut gb, gb.c)

                pc += 1
                counter += 4
            }
            $92: {
                // SUB D
                sub_instr(&mut gb, gb.d)

                pc += 1
                counter += 4
            }
            $93: {
                // SUB E
                sub_instr(&mut gb, gb.e)

                pc += 1
                counter += 4
            }
            $94: {
                // SUB H
                sub_instr(&mut gb, gb.h)

                pc += 1
                counter += 4
            }
            $95: {
                // SUB L
                sub_instr(&mut gb, gb.l)

                pc += 1
                counter += 4
            }
            $96: {
                // SUB (HL)
                val :: read_gb_byte(&gb, get_hl(&gb))
                sub_instr(&mut gb, val)

                pc += 1
                counter += 8
            }
            $D6: {
                // SUB #
                val :: read_gb_byte(&gb, pc + 1)
                sub_instr(&mut gb, val)

                pc += 2
                counter += 8
            }
            $03: {
                // INC BC
                set_bc(&mut gb, get_bc(&gb) + 1)
                pc += 1
                counter += 8
            }
            $13: {
                // INC DE
                set_de(&mut gb, get_de(&gb) + 1)
                pc += 1
                counter += 8
            }
            $23: {
                // INC HL
                set_hl(&mut gb, get_hl(&gb) + 1)
                pc += 1
                counter += 8
            }
            $33: {
                // INC SP
                sp += 1
                pc += 1
                counter += 8
            }
            $87: {
                // ADD A, A
                add_instr(&mut gb, gb.a)
                pc += 1
                counter += 4
            }
            $80: {
                // ADD A, B
                add_instr(&mut gb, gb.b)
                pc += 1
                counter += 4
            }
            $81: {
                // ADD A, C
                add_instr(&mut gb, gb.c)
                pc += 1
                counter += 4
            }
            $82: {
                // ADD A, D
                add_instr(&mut gb, gb.d)
                pc += 1
                counter += 4
            }
            $83: {
                // ADD A, E
                add_instr(&mut gb, gb.e)
                pc += 1
                counter += 4
            }
            $84: {
                // ADD A, H
                add_instr(&mut gb, gb.h)
                pc += 1
                counter += 4
            }
            $85: {
                // ADD A, L
                add_instr(&mut gb, gb.l)
                pc += 1
                counter += 4
            }
            $86: {
                // ADD A, (HL)
                hl :: get_hl(&gb)
                add_instr(&mut gb, read_gb_byte(&gb, hl))
                pc += 1
                counter += 8
            }
            $C6: {
                // ADD A, #
                num :: read_gb_byte(&gb, pc + 1)
                add_instr(&mut gb, num)
                pc += 2
                counter += 8
            }
            $06: {
                // LD B, n
                val :: read_gb_byte(&gb, pc + 1)
                gb.b = val
                pc += 2
                counter += 8
            }
            $0E: {
                // LD C, n
                val :: read_gb_byte(&gb, pc + 1)
                gb.c = val
                pc += 2
                counter += 8
            }
            $16: {
                // LD D, n
                val :: read_gb_byte(&gb, pc + 1)
                gb.d = val
                pc += 2
                counter += 8
            }
            $1E: {
                // LD E, n
                val :: read_gb_byte(&gb, pc + 1)
                gb.e = val
                pc += 2
                counter += 8
            }
            $26: {
                // LD H, n
                val :: read_gb_byte(&gb, pc + 1)
                gb.h = val
                pc += 2
                counter += 8
            }
            $2E: {
                // LD L, n
                val :: read_gb_byte(&gb, pc + 1)
                gb.l = val
                pc += 2
                counter += 8
            }
            $7F: {
                // LD A, A
                pc += 1
                counter += 4
            }
            $78: {
                // LD A, B
                gb.a = gb.b
                pc += 1
                counter += 4
            }
            $79: {
                // LD A, C
                gb.a = gb.c
                pc += 1
                counter += 4
            }
            $7A: {
                // LD A, D
                gb.a = gb.d
                pc += 1
                counter += 4
            }
            $7B: {
                // LD A, E
                gb.a = gb.e
                pc += 1
                counter += 4
            }
            $7C: {
                // LD A, H
                gb.a = gb.h
                pc += 1
                counter += 4
            }
            $7D: {
                // LD A, L
                gb.a = gb.l
                pc += 1
                counter += 4
            }
            $0A: {
                // LD A, (BC)
                gb.a = read_gb_byte(&gb, get_bc(&gb))
                pc += 1
                counter += 4
            }
            $47: {
                // LD B, A
                gb.b = gb.a
                pc += 1
                counter += 4
            }
            $4F: {
                // LD C, A
                gb.c = gb.a
                pc += 1
                counter += 4
            }
            $57: {
                // LD D, A
                gb.d = gb.a
                pc += 1
                counter += 4
            }
            $5F: {
                // LD E, A
                gb.e = gb.a
                pc += 1
                counter += 4
            }
            $67: {
                // LD H, A
                gb.h = gb.a
                pc += 1
                counter += 4
            }
            $6F: {
                // LD L, A
                gb.l = gb.a
                pc += 1
                counter += 4
            }
            $02: {
                // LD (BC), A
                write_gb_byte(&mut gb, get_bc(&gb), gb.a)
                pc += 1
                counter += 8
            }
            $12: {
                // LD (DE), A
                write_gb_byte(&mut gb, get_de(&gb), gb.a)
                pc += 1
                counter += 8
            }
            $77: {
                // LD (HL), A
                write_gb_byte(&mut gb, get_hl(&gb), gb.a)
                pc += 1
                counter += 8
            }
            $36: {
                // LD (HL), n
                val :: read_gb_byte(&gb, pc + 1)
                write_gb_byte(&mut gb, get_hl(&gb), val)
                pc += 3
                counter += 12
            }
            $EA: {
                // LD (nn), A
                address :: read_gb_word(&gb, pc + 1)
                write_gb_byte(&mut gb, address, gb.a)
                pc += 3
                counter += 16
            }
            $17: {
                // RL A
                rl_instr(&mut gb, &mut gb.a)

                pc += 1
                counter += 4
            }
            $F3: {
                // DI
                // TODO: this cast shouldn't be necessary
                interrupt_action = -(2 as i8)
                pc += 1
                counter += 4
            }
            $FB: {
                // EI
                interrupt_action = 2
                pc += 1
                counter += 4
            }
            $CB: {
                // Extended opcodes
                pc += 1
                opcode :: read_gb_byte(&gb, pc)
                switch opcode {
                    $17: {
                        // RL A
                        rl_instr(&mut gb, &mut gb.a)

                        pc += 1
                        counter += 8
                    }
                    $10: {
                        // RL B
                        rl_instr(&mut gb, &mut gb.b)

                        pc += 1
                        counter += 8
                    }
                    $11: {
                        // RL C
                        rl_instr(&mut gb, &mut gb.c)

                        pc += 1
                        counter += 8
                    }
                    $12: {
                        // RL D
                        rl_instr(&mut gb, &mut gb.d)

                        pc += 1
                        counter += 8
                    }
                    $13: {
                        // RL E
                        rl_instr(&mut gb, &mut gb.e)

                        pc += 1
                        counter += 8
                    }
                    $14: {
                        // RL H
                        rl_instr(&mut gb, &mut gb.h)

                        pc += 1
                        counter += 8
                    }
                    $15: {
                        // RL L
                        rl_instr(&mut gb, &mut gb.l)

                        pc += 1
                        counter += 8
                    }
                    $16: {
                        // RL (HL)
                        val := read_gb_byte(&gb, get_hl(&gb))
                        rl_instr(&mut gb, &mut val)
                        write_gb_byte(&mut gb, get_hl(&gb), val)

                        pc += 1
                        counter += 16
                    }
                    _: if (opcode & ~$38) == $44 {
                        // BIT b, H
                        b :: opcode >> 4 & 7
                        // TODO: change precedence of equality operator so this isn't required
                        gb.z_flag = (gb.h & (1 << b)) == 0
                        gb.n_flag = false
                        gb.h_flag = true
                        pc += 1
                        counter += 8
                    } else {
                        print("unrecognized extended opcode ")
                        print_byte(opcode)
                        print(" at address ")
                        print_word(pc as u16)
                        print("\n")
                        panic()
                    }
                }
            }
            _: {
                print("unrecognized opcode ")
                print_byte(opcode)
                print(" at address ")
                print_word(pc as u16)
                print("\n")

                panic()
            }
        }
    }

    free_gameboy(&mut gb)
}

GameBoy :: struct {
    a: u8
    b: u8
    c: u8
    d: u8
    e: u8
    f: u8
    h: u8
    l: u8

    z_flag: bool
    n_flag: bool
    h_flag: bool
    c_flag: bool

    ly: u8
    bootrom_enabled: bool

    memory: ByteSlice
    bootrom: ByteSlice
    game: ByteSlice
}

fn new_gameboy(bootrom: ByteSlice, game: ByteSlice): GameBoy {
    GameBoy {
        a: 0
        b: 0
        c: 0
        d: 0
        e: 0
        f: 0
        h: 0
        l: 0

        z_flag: false
        n_flag: false
        h_flag: false
        c_flag: false
        bootrom_enabled: true

        ly: 0

        memory: new_slice(65536)
        bootrom: bootrom
        game: game
    }
}

fn free_gameboy(gameboy: GameBoy *mut) {
    free_slice(&mut gameboy.memory)
    free_slice(&mut gameboy.bootrom)
    free_slice(&mut gameboy.game)
}


LY_REGISTER   :: $FF44 as u16
BOOT_REGISTER :: $FF50 as u16

fn read_gb_byte(gb: GameBoy*, address: u16): u8 {
    if address < $0100 && gb.bootrom_enabled {
        read_byte(gb.bootrom, address)
    } else if address < $8000 {
        read_byte(gb.game, address)
    } else if address == BOOT_REGISTER {
        $FE | if gb.bootrom_enabled { 0 } else { 1 }
    } else if address == LY_REGISTER {
        gb.ly
    } else {
        read_byte(gb.memory, address)
    }
}

fn read_gb_word(gb: GameBoy*, address: u16): u16 {
    lo :: read_gb_byte(gb, address) as u16
    hi :: read_gb_byte(gb, address + 1) as u16

    lo | (hi << 8)
}

fn write_gb_byte(gb: GameBoy *mut, address: u16, value: u8) {
    if address < $0100 && gb.bootrom_enabled {
        panic("attempt made to write to bootrom")
    } else if address == BOOT_REGISTER {
        if (value & 1) == 1 {
            gb.bootrom_enabled = false
            print("Disabled bootrom!\n")
        }
    } else {
        write_byte(gb.memory, address, value)
    }
}

fn write_gb_word(gb: GameBoy *mut, address: u16, value: u16) {
    lo :: value as u8
    hi :: (value >> 8) as u8
    write_gb_byte(gb, address, lo)
    write_gb_byte(gb, address + 1, hi)
}

fn get_flags(gb: GameBoy*): u8 {
    if gb.z_flag { Z_FLAG } else { 0 } |
        if gb.n_flag { N_FLAG } else { 0 } |
        if gb.h_flag { H_FLAG } else { 0 } |
        if gb.c_flag { C_FLAG } else { 0 }
}

fn set_flags(gb: GameBoy *mut, val: u8) {
    gb.z_flag = (val & Z_FLAG) != 0
    gb.n_flag = (val & N_FLAG) != 0
    gb.h_flag = (val & H_FLAG) != 0
    gb.c_flag = (val & C_FLAG) != 0
}

fn get_af(gb: GameBoy*): u16 {
    gb.a as u16 << 8 | get_flags(gb) as u16
}

fn set_af(gb: GameBoy *mut, val: u16) {
    gb.a = ((val & $FF00) >> 8) as u8
    set_flags(gb, val as u8)
}

fn get_bc(gb: GameBoy*): u16 {
    gb.b as u16 << 8 | gb.c as u16
}

fn set_bc(gb: GameBoy *mut, val: u16) {
    gb.b = (((val & $FF00) >> 8) as u8)
    gb.c = val as u8
}

fn get_de(gb: GameBoy*): u16 {
    gb.d as u16 << 8 | gb.e as u16
}

fn set_de(gb: GameBoy *mut, val: u16) {
    gb.d = (((val & $FF00) >> 8) as u8)
    gb.e = val as u8
}

fn get_hl(gb: GameBoy*): u16 {
    gb.h as u16 << 8 | gb.l as u16
}

fn set_hl(gb: GameBoy *mut, val: u16) {
    gb.h = (((val & $FF00) >> 8) as u8)
    gb.l = val as u8
}


fn rl_instr(gb: GameBoy *mut, register: u8 *mut) {
    bit7 :: (*register & $80) != 0
    carry :: gb.c_flag
    *register = *register << 1
    if carry {
        *register = *register | 1
    }
    gb.c_flag = bit7

    gb.z_flag = *register == 0
    gb.n_flag = false
    gb.h_flag = false
}

fn dec_instr(gb: GameBoy *mut, register: u8 *mut) {
    gb.h_flag = ((*register & $0F) - 1) <= $0F // TODO: Not sure if correct!

    *register = *register - 1
    gb.z_flag = *register == 0
    gb.n_flag = true
}

fn sub_instr(gb: GameBoy *mut, register: u8) {
    cp_instr(gb, register) // same flags
    gb.a -= register
}

fn cp_instr(gb: GameBoy *mut, register: u8) {
    a :: (gb.a)
    gb.h_flag = ((a & $0F) - register) <= $0F // TODO: Not sure if correct!

    gb.z_flag = a == register
    gb.n_flag = true
    gb.c_flag = a < register
}

fn inc_instr(gb: GameBoy *mut, register: u8 *mut) {
    gb.h_flag = ((*register & $0F) + 1) > $0F // TODO: Not sure if correct!

    *register = *register + 1

    gb.z_flag = *register == 0
    gb.n_flag = false
}

fn add_instr(gb: GameBoy *mut, register: u8) {
    // TODO: kind of expensive to compute three additions here, should come up with something better
    gb.h_flag = ((gb.a & $0F) + register & $0F) > $0F // TODO: Not sure if correct!
    gb.c_flag = ((gb.a as u16) + (register as u16)) > $FF // TODO: Not sure if correct!

    gb.a += register

    gb.z_flag = gb.a == 0
    gb.n_flag = false
}





// Library code.
ByteSlice :: struct {
    size: usize
    data: u8 *mut
}

fn new_slice(size: usize): ByteSlice {
    ByteSlice {
        size: size
        data: malloc(size) as u8 *mut
    }
}

fn read_file(path: i8*): ByteSlice {
    file :: kernel32.CreateFileA(path, GENERIC_READ, FILE_SHARE_READ, 0 as usize as SECURITY_ATTRIBUTES *mut, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, 0 as usize as HANDLE)
    invalid :: -1 as isize as usize as HANDLE
    if file as usize == _debug_mark(INVALID_HANDLE_VALUE()) as usize {
        panic("unable to open file")
    }

    size := 0 as u64
    succ :: kernel32.GetFileSizeEx(file, &mut size)
    if succ == FALSE {
        panic("unable to get file size")
    }

    size :: size as usize
    buf :: malloc(size)

    i := 0 as usize
    while i < size {
        bytes_to_read :: (size - i) as DWORD
        bytes_read := 0 as DWORD
        succ :: kernel32.ReadFile(file, (buf as usize + i) as void *mut, bytes_to_read, &mut bytes_read, 0 as usize as OVERLAPPED *mut)
        if succ == FALSE {
            panic("unable to read from file")
        }
        i += bytes_read as usize
    }
    ignore :: kernel32.CloseHandle(file)

    ByteSlice {
        size: size
        data: buf as u8 *mut
    }
}

fn write_byte(slice: ByteSlice, index: u16, value: u8) {
    *((slice.data as usize + index as usize) as u8 *mut) = value
}

fn read_byte(slice: ByteSlice, index: u16): u8 {
    *((slice.data as usize + index as usize) as u8*)
}

fn free_slice(slice: ByteSlice *mut) {
    free(slice.data as void *mut)
    slice.data = 0 as usize as u8 *mut
    slice.size = 0
}

fn print_num(num: i64) {
    num := num
    if num < 0 {
        print("-")
        num = -num
    }
    if num >= 10 {
        print_num(num / 10)
    }
    print((num % 10) as u8 + "0")
}

fn print_num(num: u64) {
    num := num
    if num >= 10 {
        print_num(num / 10)
    }
    print((num % 10) as u8 + "0")
}

fn print_byte_recurse(num: u8, count: u8) {
    num := num
    if count < 1 {
        print_byte_recurse(num / 16, count + 1)
    }
    num = num % 16
    if num >= 10 {
        print(num as u8 - 10 + "A")
    } else {
        print(num as u8 + "0")
    }
}

fn print_byte(num: u8) {
    print("$")
    print_byte_recurse(num, 0)
}

fn print_word(num: u16) {
    print("$")
    print_byte_recurse((num >> 8) as u8, 0)
    print_byte_recurse(num as u8, 0)
}




// Windows FFI code. To be cleaned up later

HWND :: void *mut
HANDLE :: void *mut

MB_OK :: 0 as u32
FILE_SHARE_READ :: 1 as DWORD

fn INVALID_HANDLE_VALUE(): HANDLE {
    -1 as isize as usize as HANDLE
}
DWORD :: u32
STD_INPUT_HANDLE :: (-10) as i32 as DWORD
STD_OUTPUT_HANDLE :: (-11) as i32 as DWORD
STD_ERROR_HANDLE :: (-12) as i32 as DWORD
BOOL :: i32
TRUE :: 1
FALSE :: 0

GENERIC_READ :: 2147483648 as DWORD
GENERIC_WRITE :: 1073741824 as DWORD

CREATE_ALWAYS :: 2 as DWORD
CREATE_NEW :: 1 as DWORD
OPEN_ALWAYS :: 4 as DWORD
OPEN_EXISTING :: 3 as DWORD
TRUNCATE_EXISTING :: 5 as DWORD

FILE_ATTRIBUTE_NORMAL :: 128 as DWORD

// it is not currently possible to have constant pointers, which is why this is a function for now
fn NULL(): void *mut { 0 as usize as void *mut }

SECURITY_ATTRIBUTES :: struct {
    nLength: DWORD
    lpSecurityDescriptor: void *mut
    bInheritHandle: BOOL
}

OVERLAPPED :: struct {}

kernel32 :: extern_mod("kernel32.dll") {
    fn GetStdHandle(nStdHandle: DWORD): HANDLE
    fn WriteConsoleA(hConsoleOutput: HANDLE, lpBuffer: void*, nNumberOfCharsToWrite: DWORD, lpNumberOfCharsWritten: DWORD *mut, lpReserved: void *mut): BOOL
    fn ReadConsoleA(hConsoleInput: HANDLE, lpBuffer: void *mut, nNumberOfCharsToRead: DWORD, lpNumberOfCharsRead: DWORD *mut, pInputControl: void *mut): BOOL
    fn CreateFileA(lpFileName: i8*, dwDesiredAccess: DWORD, dwShareMode: DWORD, lpSecurityAttributes: SECURITY_ATTRIBUTES *mut, dwCreationDisposition: DWORD, dwFlagsAndAttributes: DWORD, hTemplateFile: HANDLE): HANDLE
    fn CloseHandle(hObject: HANDLE): BOOL
    fn GetFileSizeEx(hFile: HANDLE, lpFileSize: u64 *mut): BOOL
    fn ReadFile(hFile: HANDLE, lpBuffer: void *mut, nNumberOfBytesToRead: DWORD, lpNumberOfBytesRead: DWORD *mut, lpOverlapped: OVERLAPPED *mut): BOOL

    fn QueryPerformanceCounter(lpPerformanceCount: u64 *mut): BOOL
    fn QueryPerformanceFrequency(lpFrequency: u64 *mut): BOOL
}

user32 :: extern_mod("user32.dll") {
    fn MessageBoxA(hwnd: HWND, lpText: i8*, lpCaption: i8*, uType: u32): i32
}
